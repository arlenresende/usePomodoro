import type { Metadata } from 'next'
import SidebarDashboard from './components/sidebar'
import HeaderDashboard from './components/header-dashboard'
import { ModalTaskContextProvider } from '../context/modalTaskContext'
import { unstable_noStore as noStore } from 'next/cache'
import { getKindeServerSession } from '@kinde-oss/kinde-auth-nextjs/server'
import { redirect } from 'next/navigation'
import prisma from '@/lib/db'
import { stripe } from '@/lib/stripe'
import { Toaster } from '@/components/ui/toaster'

export const metadata: Metadata = {
  title: 'Use Pomodoro - Dashboard',
  description: 'Generated by create next app',
}

interface getDataUserProps {
  email: string
  id: string
  firstName: string | undefined | null
  lastName: string | undefined | null
  profileImage: string | undefined | null
}

async function getDataUser({
  email,
  id,
  firstName,
  lastName,
}: getDataUserProps) {
  noStore()

  // Usar upsert ao invés de create - cria se não existir, atualiza se existir
  const name = `${firstName ?? ''} ${lastName ?? ''}`.trim()

  const user = await prisma.user.upsert({
    where: {
      id,
    },
    update: {
      // Atualiza dados básicos caso o usuário já exista
      email,
      name,
    },
    create: {
      id,
      email,
      name,
      timePomorodo: 25,
      pausePomodoro: 5,
      urlVideo: 'https://www.youtube.com/watch?v=9hYqOQpYq6w',
    },
    select: {
      id: true,
      stripeCustomerId: true,
    },
  })

  // Create Stripe customer if it doesn't exist
  if (!user.stripeCustomerId) {
    try {
      const stripeCustomer = await stripe.customers.create({
        email,
      })

      await prisma.user.update({
        where: {
          id,
        },
        data: {
          stripeCustomerId: stripeCustomer.id,
        },
      })
    } catch (error) {
      console.error('Error creating Stripe customer:', error)
      // Não falha a aplicação se o Stripe falhar
    }
  }

  return user
}

async function createDefaultProject(userId: string) {
  noStore()

  // Verificar se já existe um projeto
  const existingProject = await prisma.project.findFirst({
    where: {
      userId,
    },
    select: {
      id: true,
    },
  })

  // Só cria se não existir nenhum projeto
  if (!existingProject) {
    try {
      await prisma.project.create({
        data: {
          name: 'default',
          description: '',
          palletColor: '#fff',
          status: 'active',
          userId,
        },
      })
    } catch (error) {
      // Se falhar (ex: condição de corrida), apenas loga e continua
      console.error('Error creating default project:', error)
    }
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const { getUser } = getKindeServerSession()
  const user = await getUser()

  if (!user) {
    redirect('/')
  }

  // Criar/atualizar usuário e projeto em paralelo (mais eficiente)
  try {
    await Promise.all([
      getDataUser({
        email: user.email as string,
        id: user.id,
        firstName: user.given_name,
        lastName: user.family_name,
        profileImage: user.picture,
      }),
      createDefaultProject(user.id as string),
    ])
  } catch (error) {
    console.error('Error in layout initialization:', error)
    // Você pode adicionar um redirect para uma página de erro aqui se necessário
  }

  return (
    <div className="xl:min-h-screen bg-background">
      <ModalTaskContextProvider>
        <SidebarDashboard />
        <Toaster />
        <div className="p-4 xl:ml-80">
          <HeaderDashboard />
          <div className="py-12">{children}</div>
        </div>
      </ModalTaskContextProvider>
    </div>
  )
}
